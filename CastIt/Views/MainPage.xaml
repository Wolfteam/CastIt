<views:MvxWpfView
    x:Class="CastIt.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviours="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:cb="clr-namespace:CastIt.Common.Behaviours"
    xmlns:converters="clr-namespace:CastIt.Common.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
    xmlns:local="clr-namespace:CastIt.Views"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mvx="clr-namespace:MvvmCross.Platforms.Wpf.Binding.MvxBinding;assembly=MvvmCross.Platforms.Wpf"
    xmlns:uc="clr-namespace:CastIt.Views.UserControls"
    xmlns:views="clr-namespace:MvvmCross.Platforms.Wpf.Views;assembly=MvvmCross.Platforms.Wpf"
    xmlns:vmis="clr-namespace:CastIt.ViewModels.Items"
    xmlns:vms="clr-namespace:CastIt.ViewModels"
    d:DesignHeight="450"
    d:DesignWidth="800"
    x:TypeArguments="vms:MainViewModel"
    mc:Ignorable="d">
    <behaviours:Interaction.Triggers>
        <behaviours:EventTrigger EventName="Loaded">
            <behaviours:InvokeCommandAction Command="{Binding WindowLoadedCommand}" />
        </behaviours:EventTrigger>
    </behaviours:Interaction.Triggers>

    <views:MvxWpfView.Resources>
        <converters:CenterPopUpConverter x:Key="CenterPopUpConverter" />
    </views:MvxWpfView.Resources>

    <views:MvxWpfView.InputBindings>
        <KeyBinding Key="F1" Command="{Binding PreviousCommand}" />
        <KeyBinding Key="F2" Command="{Binding NextCommand}" />
        <KeyBinding Key="Space" Command="{Binding TogglePlayBackCommand}" />
        <KeyBinding
            Key="F6"
            Command="{Binding SkipCommand}"
            CommandParameter="30" />
        <KeyBinding
            Key="F4"
            Command="{Binding SkipCommand}"
            CommandParameter="-30" />
        <KeyBinding
            Key="Tab"
            Command="{Binding SwitchPlayListsCommand}"
            Modifiers="Ctrl" />
    </views:MvxWpfView.InputBindings>

    <Grid VerticalAlignment="Stretch">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="2*" />
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <uc:WindowButtons
            x:Name="WindowButtons"
            Grid.Row="0"
            Grid.ColumnSpan="2"
            HorizontalAlignment="Stretch" />

        <Image
            Grid.Row="1"
            Grid.Column="0"
            Width="200"
            Height="150"
            HorizontalAlignment="Left"
            Focusable="False"
            Source="/Resources/Clannad.jpg" />

        <Grid
            Grid.Row="1"
            Grid.Column="1"
            HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <materialDesign:ColorZone
                Grid.Row="0"
                Grid.ColumnSpan="2"
                Padding="16,0,16,16"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Mode="Inverted">
                <StackPanel Orientation="Vertical">
                    <TextBlock Margin="0,0,0,5" TextTrimming="CharacterEllipsis">
                        <TextBlock.Style>
                            <Style BasedOn="{StaticResource MaterialDesignHeadline6TextBlock}" TargetType="TextBlock">
                                <Setter Property="Text" Value="" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsCurrentlyPlaying}" Value="True">
                                        <Setter Property="Text" Value="{Binding [NowPlaying]}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock
                        Style="{StaticResource MaterialDesignSubtitle1TextBlock}"
                        Text="{Binding CurrentlyPlayingFilename}"
                        TextTrimming="CharacterEllipsis" />
                </StackPanel>
            </materialDesign:ColorZone>

            <StackPanel
                Grid.Row="1"
                Grid.Column="0"
                Margin="0,0,0,10"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom"
                Orientation="Horizontal">
                <Button
                    Command="{Binding PreviousCommand}"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [Previous]}">
                    <materialDesign:PackIcon Kind="SkipPrevious" />
                </Button>
                <Button
                    Command="{Binding SkipCommand}"
                    CommandParameter="-30"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [GoBack30Sec]}">
                    <materialDesign:PackIcon Kind="TitleBackward" />
                </Button>
                <Button Command="{Binding TogglePlayBackCommand}">
                    <Button.Style>
                        <Style BasedOn="{StaticResource MainButtonStyle}" TargetType="Button">
                            <Setter Property="ToolTip" Value="{Binding [Play]}" />
                            <Setter Property="Content">
                                <Setter.Value>
                                    <materialDesign:PackIcon Kind="Play" />
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsPaused}" Value="True">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <materialDesign:PackIcon Kind="Pause" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="ToolTip" Value="{Binding [Pause]}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button
                    Command="{Binding StopPlayBackCommand}"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [Stop]}">
                    <materialDesign:PackIcon Kind="Stop" />
                </Button>
                <Button
                    Command="{Binding SkipCommand}"
                    CommandParameter="30"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [GoForward30Sec]}">
                    <materialDesign:PackIcon Kind="TitleForward" />
                </Button>
                <Button
                    Command="{Binding NextCommand}"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [Next]}">
                    <materialDesign:PackIcon Kind="SkipNext" />
                </Button>
            </StackPanel>

            <StackPanel
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,0,0,10"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Orientation="Horizontal">
                <Popup
                    IsOpen="{Binding ShowSettingsPopUp, Mode=TwoWay}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=SettingsButton}"
                    StaysOpen="False">
                    <Popup.HorizontalOffset>
                        <MultiBinding Converter="{StaticResource CenterPopUpConverter}" ConverterParameter="False">
                            <Binding ElementName="SettingsUserControl" Path="Width " />
                            <Binding ElementName="SettingsButton" Path="ActualWidth" />
                        </MultiBinding>
                    </Popup.HorizontalOffset>
                    <uc:Settings x:Name="SettingsUserControl" />
                </Popup>
                <Button Click="Button_Click">
                    <Button.Style>
                        <Style BasedOn="{StaticResource MainButtonStyle}" TargetType="Button">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <materialDesign:PackIcon Kind="ChevronUp" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ToolTip" Value="{Binding [Collapse]}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <materialDesign:PackIcon Kind="ChevronDown" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="ToolTip" Value="{Binding [Expand]}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button
                    x:Name="SettingsButton"
                    Command="{Binding OpenSettingsCommand}"
                    Style="{StaticResource MainButtonStyle}"
                    ToolTip="{Binding [Settings]}">
                    <materialDesign:PackIcon Kind="Cog" />
                </Button>
                <Button Style="{StaticResource MainButtonStyle}" ToolTip="{Binding [Devices]}">
                    <materialDesign:PackIcon Kind="Tv" />
                </Button>
            </StackPanel>
        </Grid>

        <ProgressBar
            Grid.Row="2"
            Grid.ColumnSpan="2"
            Height="6"
            Maximum="100"
            Minimum="0"
            Style="{StaticResource AppProgressBarStyle}"
            Value="{Binding PlayedPercentage}" />

        <dragablz:TabablzControl
            x:Name="PlayListTabControl"
            Grid.Row="3"
            Grid.ColumnSpan="2"
            HorizontalAlignment="Stretch"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            BorderThickness="0"
            ItemsSource="{Binding PlayLists}"
            SelectedIndex="{Binding SelectedPlayListIndex, Mode=TwoWay}"
            Tag="{Binding}">
            <dragablz:TabablzControl.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding PlacementTarget.Tag.AddNewPlayListCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}" Header="{Binding [AddNewPlayList]}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="Plus" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </dragablz:TabablzControl.ContextMenu>
            <dragablz:TabablzControl.HeaderItemTemplate>
                <DataTemplate DataType="{x:Type vmis:PlayListItemViewModel}">
                    <Grid>
                        <Grid.ContextMenu>
                            <ContextMenu StaysOpen="False">
                                <MenuItem Command="{Binding RenameCommand}" Header="{Binding [Rename]}">
                                    <MenuItem.Icon>
                                        <materialDesign:PackIcon Kind="RenameBox" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem
                                    Command="{Binding Source={x:Reference Name=PlayListTabControl}, Path=DataContext.DeletePlayListCommand}"
                                    CommandParameter="{Binding}"
                                    Header="{Binding [Delete]}">
                                    <MenuItem.Icon>
                                        <materialDesign:PackIcon Kind="DeleteForever" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem
                                    Command="{Binding Source={x:Reference Name=PlayListTabControl}, Path=DataContext.DeleteAllPlayListsExceptCommand}"
                                    CommandParameter="{Binding}"
                                    Header="{Binding [DeleteAllExceptThis]}">
                                    <MenuItem.Icon>
                                        <materialDesign:PackIcon Kind="DeleteEmpty" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <!--  we'll be in a popup, so give dragablz a hint as to what tab header content needs closing  -->
                                <!--<MenuItem Command="{x:Static dragablz:TabablzControl.CloseItemCommand}"/>-->
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <TextBlock Foreground="White" Text="{Binding Name}" />
                    </Grid>
                </DataTemplate>
            </dragablz:TabablzControl.HeaderItemTemplate>
            <dragablz:TabablzControl.ContentTemplate>
                <DataTemplate DataType="{x:Type vmis:PlayListItemViewModel}">
                    <uc:PlayListItem
                        HorizontalAlignment="Stretch"
                        HorizontalContentAlignment="Stretch"
                        DataContext="{Binding}" />
                </DataTemplate>
            </dragablz:TabablzControl.ContentTemplate>
        </dragablz:TabablzControl>
    </Grid>
</views:MvxWpfView>
